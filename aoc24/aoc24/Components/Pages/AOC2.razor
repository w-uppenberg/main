@page "/aoc2"
@rendermode InteractiveServer
@using System.Diagnostics
@using System.Text.RegularExpressions

<PageTitle>Day 2</PageTitle>

<h3>AOC 2024 - Gustav Solutions - Day 2</h3>
<p>Enter the input for the next activity</p>

<div class="input-container">
	<textarea class="styled-textarea" @bind="inputText" rows="10" cols="50" maxlength="32000"></textarea>
	<button class="btn btn-light" @onclick="ReadInput">Perform todays activity!</button>
</div>

<h2>Part 1 Result: @res1</h2>
<h2>Part 2 Result: @res2</h2>



@code {
	private String inputText = "";
	private String res1 =  "";
	private String res2 = "";

	private void ReadInput() {
		Part1();
		Part2();
	}


	private void Part1()
	{
		Debug.WriteLine(inputText);

		string[] rowsStr = (new Regex("[^0-9] ")).Replace(inputText, "").Split("\n");
		List<List<int>> rows = new List<List<int>>();
		foreach (string rowStr in rowsStr)
		{
			List<int> row = new List<int>();
			string[] splitRow = rowStr.Split(" ");

			for (int i = 0; i < splitRow.Length; i++)
			{
				row.Add(int.Parse(splitRow[i]));
			}
			rows.Add(row);
		}

		int nrSafeReports = 0;
		foreach (List<int> row in rows)
		{
			int decreasing = 0;
			int increasing = 0;


			bool faultySizeDiff = false;
			//check if this report is safe by checking if the entry on on columns[i][j] is always larger than or smaller than columns[i][j+1]
			for (int i = 0; i < (row.Count - 1); i++)
			{
				if (row[i] > row[i + 1])
				{
					decreasing++;
				}
				if (row[i] < row[i + 1])
				{
					increasing++;
				}

				if (row[i] == row[i + 1] || Math.Abs(row[i] - row[i + 1]) > 3)
				{
					faultySizeDiff = true;
				}
			}
			if ((decreasing == 0 && increasing > 0 || increasing == 0 && decreasing > 0) && !faultySizeDiff)
			{
				nrSafeReports++;
			}

		}

		res1 = nrSafeReports.ToString();
	}

	private void Part2()
	{
		Debug.WriteLine(inputText);

		string[] rowsStr = (new Regex("[^0-9] ")).Replace(inputText, "").Split("\n");
		List<List<int>> rows = new List<List<int>>();
		foreach (string rowStr in rowsStr)
		{
			List<int> row = new List<int>();
			string[] splitRow = rowStr.Split(" ");

			for (int i = 0; i < splitRow.Length; i++)
			{
				row.Add(int.Parse(splitRow[i]));
			}
			rows.Add(row);
		}

		int nrSafeReports = 0;
		foreach (List<int> row in rows)
		{
			bool rowOk = TestRow(row);
			if (rowOk)
			{
				nrSafeReports++;
			}
			else
			{
				//check
				for (int i = 0; i<row.Count; i++ )
				{
					List<int> rowCopy = new List<int>(row);
					rowCopy.RemoveAt(i);
					if (TestRow(rowCopy))
                    {
                        nrSafeReports++;
                        break;
                    }
				}
			}
		}

		res2 = nrSafeReports.ToString();
	}


	private bool TestRow(List<int> row)
	{

		int decreasing = 0;
		int increasing = 0;
		bool faultySizeDiff = false;
		//check if this report is safe by checking if the entry on on columns[i][j] is always larger than or smaller than columns[i][j+1]

		for (int i = 0; i < (row.Count - 1); i++)
		{
			if (row[i] > row[i + 1])
			{
				decreasing++;
			}
			if (row[i] < row[i + 1])
			{
				increasing++;
			}

			if (row[i] == row[i + 1] || Math.Abs(row[i] - row[i + 1]) > 3)
			{
				faultySizeDiff = true;
			}
		}
		if ((decreasing == 0 && increasing > 0 || increasing == 0 && decreasing > 0) && !faultySizeDiff)
		{
			return true;
		}
		return false;
	}
}
